<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<import resource="classpath*:spring/applicationContext*.xml" />

	<!-- 自动扫描的包名 -->
	<context:component-scan base-package="com.guanshj"></context:component-scan>

	<!-- 默认的注解映射的支持 -->
	<mvc:annotation-driven />

    <!--<mvc:resources mapping="/img/**" location="/img/" />
    <mvc:resources mapping="/js/**" location="/js/" />
    <mvc:resources mapping="/css/**" location="/css/" />-->

    <!-- 对静态资源文件的访问 -->
    <mvc:default-servlet-handler />

	<!-- 视图解释类 -->
	<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="prefix" value="/"/> <property name="suffix" value=".htm"/>可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
		/> </bean> -->

	<bean id="velocityConfigurer"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/" />
		<property name="velocityProperties">
			<props>
				<prop key="input.encoding">utf-8</prop>
				<prop key="output.encoding">utf-8</prop>
			</props>
		</property>
	</bean>

	<!-- prefix先暂时置为空，因为velocity还有另外一个配置。把.jsp修改位.vm模板格式，然后必须加入contentType这一项 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="cache" value="true" />
		<property name="prefix" value="" />
		<property name="suffix" value=".html" />
		<property name="contentType">
			<value>text/html;charset=UTF-8</value>
		</property>
		<!-- 在模板页面取得session的相关信息 -->
		<property name="exposeSessionAttributes">
			<value>true</value>
		</property>
		<!--<property name="toolboxConfigLocation" value="/WEB-INF/tools.xml" />-->
		<!--<property name="viewClass"-->
			<!--value="net.hunanst.eos.velocity.VelocityToolbox20View" />-->
	</bean>

	<!-- 当服务器发生异常时，spring mvc 可以通过如下方式跳转掉错误页面； 但是已经在web.xml中已经定义了异常页面，故此无需再定义 -->
	<!-- <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> 
		<property name="exceptionMappings"> <props> <prop key="java.lang.Exception">error-server</prop> 
		</props> </property> </bean> -->

	<!-- 对静态资源文件的访问 -->
	<mvc:default-servlet-handler />

	<!-- SpringMVC上传文件时,需配置MultipartResolver处理器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 指定所上传文件的总大小不能超过20M......注意maxUploadSize属性的限制不是针对单个文件,而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="20000000" />
	</bean>

	<!-- SpringMVC在超出上传文件限制时,会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的,而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时,自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">error-405</prop>
			</props>
		</property>
	</bean>


</beans>